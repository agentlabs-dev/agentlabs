openapi: 3.0.0
paths:
  /:
    get:
      operationId: getHello
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: string
  /users/register:
    post:
      operationId: register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreatedResponseDto"
        "409":
          description: User already exists, please login.
        "500":
          description: Something went wrong.
      tags:
        - users
  /users/login:
    post:
      operationId: login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseDto"
        "401":
          description: The provided credentials are invalid or the user does not have a
            password configured.
        "500":
          description: Something went wrong.
      tags:
        - users
  /users/whoami:
    post:
      operationId: whoami
      parameters: []
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WhoAmIResultDto"
        "404":
          description: User not found
        "500":
          description: Something went wrong.
      tags:
        - users
      security:
        - bearer: []
  /projects/create:
    post:
      operationId: createProject
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedProjectDto"
      tags:
        - projects
      security:
        - bearer: []
  /projects/listForOrganization/{organizationId}:
    get:
      operationId: listOrganizationProjects
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListProjectsResultDto"
      tags:
        - projects
      security:
        - bearer: []
  /projects/exists/{slug}:
    get:
      operationId: projectExists
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectExistsResponseDto"
      tags:
        - projects
      security:
        - bearer: []
  /projects/getById/{projectId}:
    get:
      operationId: getById
      parameters:
        - name: projectId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectDto"
      tags:
        - projects
      security:
        - bearer: []
  /projects/getPublicConfig:
    get:
      operationId: getPublicConfig
      parameters:
        - name: hostname
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicProjectConfigDto"
        "422":
          description: Unprocessable hostname or unknown project
      tags:
        - projects
      security:
        - bearer: []
  /agents/create:
    post:
      operationId: createAgent
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAgentDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedAgentDto"
      tags:
        - agents
      security:
        - bearer: []
  /agents/listForProject/{projectId}:
    post:
      operationId: listForProject
      parameters:
        - name: projectId
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAgentsResponseDto"
        "401":
          description: You are not authorized to access this resource
      tags:
        - agents
      security:
        - bearer: []
  /agents/getById/{agentId}:
    post:
      operationId: getById
      parameters:
        - name: agentId
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAgentResponseDto"
        "401":
          description: You are not authorized to access this resource
      tags:
        - agents
      security:
        - bearer: []
  /authMethods/create:
    post:
      operationId: createAuthMethod
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAuthMethodDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedAuthMethodDto"
      tags:
        - authMethods
      security:
        - bearer: []
  /authMethods/createDemoAuthMethods:
    post:
      operationId: createDemoAuthMethod
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDemoAuthMethodsDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedDemoAuthMethodsDto"
      tags:
        - authMethods
      security:
        - bearer: []
  /authMethods/listForProject/{projectId}:
    get:
      operationId: listAuthMethods
      parameters:
        - name: projectId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAuthMethodResponseDto"
      tags:
        - authMethods
      security:
        - bearer: []
  /conversations/getAll:
    get:
      operationId: getAllConversations
      parameters:
        - name: agentId
          required: true
          in: query
          schema:
            type: string
        - name: memberId
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - Agent Chat Conversations
  /conversations/getById/{conversationId}:
    get:
      operationId: getConversationById
      parameters:
        - name: conversationId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
      tags:
        - Agent Chat Conversations
  /agent-chat-messages/listByConversationId/{conversationId}:
    get:
      operationId: listByConversationId
      parameters:
        - name: conversationId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - Agent Chat Messages
  /members/p/{projectId}/requestPasswordlessEmail:
    post:
      operationId: requestPasswordlessEmail
      parameters:
        - name: projectId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestPasswordlessEmailDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponseDto"
      tags:
        - Members
  /members/p/{projectId}/verifyPasswordlessEmail:
    post:
      operationId: verifyPasswordlessEmail
      parameters:
        - name: projectId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyPasswordlessEmailDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginMemberResponseDto"
      tags:
        - Members
  /agent-attachments/listByMessageId/{messageId}:
    get:
      operationId: listByMessageId
      parameters:
        - name: messageId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - Agent Attachments
  /agent-attachments/getById/{attachmentId}:
    get:
      operationId: getById
      parameters:
        - name: attachmentId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
      tags:
        - Agent Attachments
  /agent-attachments/getById/{attachmentId}/data:
    get:
      operationId: getAttachmentDataById
      parameters:
        - name: attachmentId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - Agent Attachments
  /agent-attachments/createMessageAttachmentSync:
    post:
      operationId: createSync
      parameters:
        - name: projectId
          required: true
          in: query
          schema:
            type: string
        - name: agentId
          required: true
          in: query
          schema:
            type: string
        - name: messageId
          required: true
          in: query
          schema:
            type: string
      responses:
        "201":
          description: ""
      tags:
        - Agent Attachments
info:
  title: AgentLabs API
  description: Build AI Agents in minutes, not months.
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    RegisterUserDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 6
        fullName:
          type: string
          minLength: 2
      required:
        - email
        - password
        - fullName
    UserCreatedResponseDto:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        fullName:
          type: string
        verifiedAt:
          format: date-time
          type: string
          nullable: true
      required:
        - id
        - email
        - fullName
        - verifiedAt
    LoginUserDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 6
      required:
        - email
        - password
    SanitizedUserResponseDto:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        fullName:
          type: string
        verifiedAt:
          format: date-time
          type: string
          nullable: true
      required:
        - id
        - email
        - fullName
        - verifiedAt
    LoginResponseDto:
      type: object
      properties:
        accessToken:
          type: string
        user:
          $ref: "#/components/schemas/SanitizedUserResponseDto"
      required:
        - accessToken
        - user
    WhoAmIResultDto:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        fullName:
          type: string
        verifiedAt:
          format: date-time
          type: string
          nullable: true
        organizationCount:
          type: number
        defaultProjectId:
          type: string
          nullable: true
        defaultOrganizationId:
          type: string
          nullable: true
        onboarding:
          type: object
        projectCount:
          type: number
        projectCreatedCount:
          type: number
      required:
        - id
        - email
        - fullName
        - verifiedAt
        - organizationCount
        - defaultProjectId
        - defaultOrganizationId
        - onboarding
        - projectCount
        - projectCreatedCount
    CreateProjectDto:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        organizationId:
          type: string
      required:
        - name
        - slug
        - organizationId
    CreatedProjectDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        organizationId:
          type: string
        creatorId:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - name
        - slug
        - organizationId
        - creatorId
        - createdAt
        - updatedAt
    ListProjectItemDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        organizationId:
          type: string
        creatorId:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - name
        - slug
        - organizationId
        - creatorId
        - createdAt
        - updatedAt
    ListProjectsResultDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ListProjectItemDto"
        total:
          type: number
      required:
        - items
        - total
    ProjectExistsResponseDto:
      type: object
      properties:
        exists:
          type: boolean
      required:
        - exists
    ProjectDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        organizationId:
          type: string
        creatorId:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - name
        - slug
        - organizationId
        - creatorId
        - createdAt
        - updatedAt
    PublicProjectConfigDto:
      type: object
      properties:
        hostname:
          type: string
        id:
          type: string
        slug:
          type: string
        name:
          type: string
        organizationId:
          type: string
      required:
        - hostname
        - id
        - slug
        - name
        - organizationId
    CreateAgentDto:
      type: object
      properties:
        name:
          type: string
        projectId:
          type: string
      required:
        - name
        - projectId
    CreatedAgentDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        projectId:
          type: string
        creatorId:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - name
        - projectId
        - creatorId
        - createdAt
        - updatedAt
    ListAgentItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        projectId:
          type: string
        creatorId:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - name
        - projectId
        - creatorId
        - createdAt
        - updatedAt
    ListAgentsResponseDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ListAgentItem"
        total:
          type: number
      required:
        - items
        - total
    GetAgentResponseDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        projectId:
          type: string
        creatorId:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - name
        - projectId
        - creatorId
        - createdAt
        - updatedAt
    CreateAuthMethodDto:
      type: object
      properties:
        type:
          type: string
          enum:
            - OAUTH2
            - API_KEY
            - PASSWORDLESS_EMAIL
            - PASSWORDLESS_SMS
        provider:
          type: string
          enum:
            - EMAIL
            - GOOGLE
            - GITHUB
            - GITLAB
            - MICROSOFT
            - FACEBOOK
            - TWITTER
            - APPLE
        projectId:
          type: string
        isEnabled:
          type: boolean
        clientId:
          type: string
        clientSecret:
          type: string
        scopes:
          type: array
          items:
            type: string
      required:
        - type
        - provider
        - projectId
        - isEnabled
        - clientId
        - clientSecret
        - scopes
    CreatedAuthMethodDto:
      type: object
      properties:
        type:
          type: string
          enum:
            - OAUTH2
            - API_KEY
            - PASSWORDLESS_EMAIL
            - PASSWORDLESS_SMS
        provider:
          type: string
          enum:
            - EMAIL
            - GOOGLE
            - GITHUB
            - GITLAB
            - MICROSOFT
            - FACEBOOK
            - TWITTER
            - APPLE
        projectId:
          type: string
        isEnabled:
          type: boolean
        clientId:
          type: string
          nullable: true
        clientSecret:
          type: string
          nullable: true
        scopes:
          type: array
          items:
            type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - type
        - provider
        - projectId
        - isEnabled
        - clientId
        - clientSecret
        - scopes
        - createdAt
        - updatedAt
    CreateDemoAuthMethodsDto:
      type: object
      properties:
        methodTypes:
          type: array
          items:
            type: object
        projectId:
          type: string
      required:
        - methodTypes
        - projectId
    CreatedDemoAuthMethodsDto:
      type: object
      properties:
        success:
          type: boolean
      required:
        - success
    ListAuthMethodItem:
      type: object
      properties:
        type:
          type: string
          enum:
            - OAUTH2
            - API_KEY
            - PASSWORDLESS_EMAIL
            - PASSWORDLESS_SMS
        provider:
          type: string
          enum:
            - EMAIL
            - GOOGLE
            - GITHUB
            - GITLAB
            - MICROSOFT
            - FACEBOOK
            - TWITTER
            - APPLE
        projectId:
          type: string
        isEnabled:
          type: boolean
        clientId:
          type: string
          nullable: true
        clientSecret:
          type: string
          nullable: true
        scopes:
          type: array
          items:
            type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - type
        - provider
        - projectId
        - isEnabled
        - clientId
        - clientSecret
        - scopes
        - createdAt
        - updatedAt
    ListAuthMethodResponseDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ListAuthMethodItem"
        total:
          type: number
      required:
        - items
        - total
    RequestPasswordlessEmailDto:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    RegisterResponseDto:
      type: object
      properties:
        email:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - email
        - createdAt
        - updatedAt
    VerifyPasswordlessEmailDto:
      type: object
      properties:
        email:
          type: string
        code:
          type: string
      required:
        - email
        - code
    SanitizedMemberDto:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        verifiedAt:
          format: date-time
          type: string
          nullable: true
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - email
        - firstName
        - lastName
        - verifiedAt
        - createdAt
        - updatedAt
    LoginMemberResponseDto:
      type: object
      properties:
        accessToken:
          type: string
        member:
          $ref: "#/components/schemas/SanitizedMemberDto"
      required:
        - accessToken
        - member
