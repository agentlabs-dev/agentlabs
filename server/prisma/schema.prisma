// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PasswordHashConfig {
    id          String @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt @default(now())

    user        User @relation(fields: [userId], references: [id])
    userId      String @unique

    algorithm   String
    memCost     Int
    keyLength   Int
    salt        String
}

model Onboarding {
	id        String   @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt @default(now())

	// Deprecated, not used anymore
	hasAddedAuthMethod 		Boolean @default(false)
	// Deprecated, not used anymore
	hasUsedTheApplication 	Boolean @default(false)

	organization	Organization @relation(fields: [organizationId], references: [id])
	organizationId	String @unique

	project				Project? @relation(fields: [projectId], references: [id])
	projectId			String?

	user					User @relation(fields: [userId], references: [id])
	userId				String @unique
}

model User {
	id        String   @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt @default(now())

	email      String  @unique
	fullName   String

	profilePictureUrl String?

	// If these fields are null, it means they are falsy
	verifiedAt DateTime?
	bannedAt   DateTime?

	// Note: we will always prefer Hard Delete over Soft Delete.
	// This is crucial to comply with GDPR.
	// deletedAt		DateTime? << DO NOT DO THIS.

	passwordHash       String?
	passwordHashConfig PasswordHashConfig?

	organizations 		OrganizationUser[]
	projectCreated	 	Project[]
	agentCreated			Agent[]
	onboardings				Onboarding[]
	sdkSecrets				SdkSecret[]
}

model Organization {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	name					String

	users					OrganizationUser[]
	projects			Project[]

	onboardings		Onboarding[]
}

enum OrganizationUserRole {
	USER
	ADMIN
}

model OrganizationUser {
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	organization	Organization @relation(fields: [organizationId], references: [id])
	organizationId	String

	user					User @relation(fields: [userId], references: [id])
	userId				String

	role					OrganizationUserRole @default(ADMIN)

	@@id([organizationId, userId])
}

model Project {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	name					String
	slug					String	@unique

	creator				User @relation(fields: [creatorId], references: [id])
	creatorId			String

	organization		Organization @relation(fields: [organizationId], references: [id])
	organizationId	String

	agents				Agent[]
	members				Member[]
	sdkSecrets		SdkSecret[]
	authMethods		AuthMethod[]
	onboardings		Onboarding[]
	memberAuthVerificationCodes MemberAuthVerificationCode[]
	agentConversations	Conversation[]

	smtpConfiguration							SmtpConfiguration?

	projectBackendConnectionLogs	ProjectBackendConnectionLog[]

	attachments		Attachment[]
}

enum AuthMethodType {
	OAUTH2
	EMAIL
	PHONE_NUMBER
	ANONYMOUS
}

model SmtpConfiguration {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	host					String
	port					Int
	secure				Boolean
	username			String
	password			String

	senderName		String
	senderEmail		String
	replyTo				String

	project				Project @relation(fields: [projectId], references: [id])
	projectId			String 	@unique
}

model AuthMethod {
	@@id([projectId, provider])

	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	provider			AuthProvider
	type					AuthMethodType
	isEnabled			Boolean @default(false)

	// Only for OAuth2 providers
	// If these fields are null, it means we will use the demo IDs
	clientId				String?
	clientSecret		String?
	clientSecretIv	String?
	scopes					String[]

	project				Project @relation(fields: [projectId], references: [id])
	projectId			String
}

model SdkSecret {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())
	revokedAt			DateTime?

	hash					String	@unique
	preview				String
	description		String?

	projectId			String
	project				Project @relation(fields: [projectId], references: [id])

	creator				User @relation(fields: [creatorId], references: [id])
	creatorId			String
}

model Agent {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	deletedAt			DateTime?

	name					String

	creator				User @relation(fields: [creatorId], references: [id])
	creatorId			String

	project				Project @relation(fields: [projectId], references: [id])
	projectId			String

	logoUrl				String?

	messages			ChatMessage[]
}

model MemberAuthVerificationCode {
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	code					String
	expiresAt			DateTime

	project				Project @relation(fields: [projectId], references: [id])
	projectId			String

	member				Member @relation(fields: [memberId], references: [id])
	memberId			String @unique

	@@id([projectId, memberId])
}

model MemberAuth {
	id 								 String @id @default(uuid())
	createdAt   DateTime @default(now())
	updatedAt   DateTime @updatedAt @default(now())

	passwordHash       String?

	member        Member @relation(fields: [memberId], references: [id])
	memberId      String @unique

	algorithm   String
	memCost     Int
	keyLength   Int
	salt        String
}

model Member {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	@@unique([projectId, email])

	// If these fields are null, it means they are falsy
	verifiedAt		DateTime?
	bannedAt			DateTime?

	// Note: we will always prefer Hard Delete over Soft Delete.
	// This is crucial to comply with GDPR.
	// deletedAt		DateTime? << DO NOT DO THIS.

	firstName			String?
	lastName			String?
	fullName			String?

	email					String?
	isAnonymous		Boolean @default(false)

	profilePictureUrl	String?

	project				Project @relation(fields: [projectId], references: [id])
	projectId			String

	identities		MemberIdentity[]
	conversations			Conversation[]
	auth 				  		MemberAuth?
	verificationCode	MemberAuthVerificationCode?
}

enum AuthProvider {
	PASSWORDLESS_EMAIL
	EMAIL_AND_PASSWORD
	SMS
	ANONYMOUS
	GOOGLE
	GITHUB
	GITLAB
	MICROSOFT
}

model MemberIdentity {
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	provider			AuthProvider

	// if the provider is EMAIL, then the id is the email address
	providerUserId		String

	memberId			String
	member				Member @relation(fields: [memberId], references: [id])

	lastSignedInAt	DateTime?

	accessToken		String?
	refreshToken	String?
	accessTokenExpiresAt			DateTime?
	refreshTokenExpiresAt			DateTime?

	@@id([memberId, provider])
}

model Conversation {
	id				String		@id 		@default(uuid())
	createdAt 		DateTime				@default(now())
	updatedAt 		DateTime	@updatedAt	@default(now())

	project			Project		@relation(fields: [projectId], references: [id])
	projectId		String

	memberId 		String
	member			Member		@relation(fields: [memberId], references: [id])
	messages		ChatMessage[]
}

enum ChatMessageSource {
	USER
	AGENT		
	SYSTEM // reserved for future use
}

enum MessageFormat {
	PLAIN_TEXT
	MARKDOWN
	HTML // reserved for future use
}

model ChatMessage {
	id				String				@id			@default(uuid())
	createdAt		DateTime						@default(now())
	updateAt		DateTime			@updatedAt	@default(now())

	source			ChatMessageSource
	text			String

	conversationId	String
	conversation	Conversation	@relation(fields: [conversationId], references: [id])
	
	attachments		ChatMessageAttachment[]
	format			MessageFormat @default(PLAIN_TEXT)
	type			String @default("TEXT")
	metadata		Json @default("{}")

	agent 			Agent? @relation(fields: [agentId], references: [id])
	agentId			String?
}

model ChatMessageAttachment {
	id				String				@id			@default(uuid())

	attachmentId	String @unique
	attachment		Attachment	@relation(fields: [attachmentId], references: [id])

	messageId		String
	message			ChatMessage	@relation(fields: [messageId], references: [id])
}

enum AttachmentStorageDriver {
	AWS_S3
	AZURE_BLOB_STORAGE
	GOOGLE_CLOUD_STORAGE
	LOCAL_FILE_SYSTEM
}

model Attachment {
	id						String				@id			@default(uuid())

	createdAt				DateTime						@default(now())
	updateAt				DateTime			@updatedAt	@default(now())

	name					String
	mimeType				String
	checksumSha256			String
	driver					AttachmentStorageDriver
	isPublic				Boolean @default(false)
	sizeBytes			    Int

	agentMessageAttachment	ChatMessageAttachment?

	projectId				String
	project					Project @relation(fields: [projectId], references: [id])
}


// Log one each time an agent initializes a connection to the server
model ProjectBackendConnectionLog {
	id				String				@id		
	createdAt		DateTime						@default(now())

	// The IP address of the connecting agent.
	ipAddress			String

	projectId			String
	project				Project @relation(fields: [projectId], references: [id])
}
